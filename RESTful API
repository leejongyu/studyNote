.  RESTful API : REST의 설계 규칙을 잘 지켜서 설계된 API. (ref : https://dev-coco.tistory.com/97)

- RESTful API 요약
  단순하고 일관된 HTTP 메서드 집합을 사용하여 인터넷을 통해 리소스에 엑세스하고 리소스를 조작할 수 있음.
  상태 비저장 클라이언트-서버 아키텍처에 의존
    -> 이는, 서버가 클라이언트 상태를 저장하지 않고, 각 요청에는 서버가 요청을 이해하고 처리하는데 필요한 모든 정보가 담겨있음.
  RESTful API의 리소스는 URI로 식별된다.

- RESTful API 사용의 장점
  1) 자원 지향적 접근 : 각 자원은 고유의 URI로 식별되며, 클라이언트는 이 URI를 이용하여 자원에 대한 CRUD작업 수행.
                    -> API의 가독성과 이해하기 쉬운 구조를 제공. 클라이언트의 개발과 유지보수를 용이하게 만듬.
  2) 확장성, 유연성 : 특정 플랫폼이나 언어에 종속되지 않음.
  3) 상태 없음 : 클라이언트의 상태를 유지하지 않고, 각 요청은 독립적으로 진행.
                -> 서버의 부하를 줄이고 확장성과 신뢰성을 향상. 클라이언트와 서버간의      
  4) 상호작용을 단순화
  5) 캐시 기능 : 이전에 요청한 데이터를 다시 요청하지 않고 캐싱된 데이터 사용
  6) 보안성 : HTTPS 프로토콜을 사용하여  보안성을 유지.

- URI는 정보의 자원만 표현, 자원의 행위는 HTTP Method에 명시.
  HTTP METHOD : GET(R), POST(C), PUT(U-all), PATCH(U-some), DELETE(D) …

- 여기서 REST는 REpresentational State Transfer. 자원을 ‘이름’으로 구분해 해당 자원의 ‘정보’를 주고 받는 모든 것을 의미.
  즉, 자원의 표현에 의한 상태 전달.
  * 자원 : 해당 SW가 관리하는 모든 것.
  * 표현 : 자원을 표현하기 위한 이름
  * 상태 전달 : 데이터가 요청되는 시점에 자원의 상태를 전달.

- REST는 기본적으로 웹의 기존 기술과 HTTP 프로토콜을 그대로 활용하기 때문에, 웹의 장점을 최대한 활용할 수 있는 아키텍처 스타일.


> REST의 개념 : 어떤 자원에 대해 CRUD를 수행하기 위해서 URI로 GET, POST 등의 방식을 사용하여 요청을 보내며, 요청을 위한 자원은 특정한 형태로 표현,

- REST의 구성 요소
  1) 자원(Resource) - URI.
    모든 자원에는 고유한 ID가 존재하고, 이 자원은 Server에 존재.
    자원을 구별하는 ID는 HTTP URI.
    클라이언트는 URI를 이용해 자원을 지정하고 해당 자원의 상태에 대한 조작을 Server에 요청.
  2) 행위(Verb) - Method 
    HTTP 프로토콜의 Method를 사용.
    HTTP 프로토콜은 CRUD를 제공.
  3) 표현(Representation of Resource)
    클라이언트와 서버가 데이터를 주고받는 형태. (JSON, XML, TEXT, RSS 등)
    일반적으로 JSON, XML을 통해 데이터를 주고 받는 것이 일반적.

- REST의 특징
 1) 서버-클라이언트 구조
    자원이 있는 쪽이 Server, 자원을 요청하는 쪽이 Client가 됨.
    REST Server는 API를 제공. 로직 처리 및 저장.
    클라이언트는 사용자 인증, context 등을 직접 관리.
    역할을 구분시켜켜 의존성을 줄임.
 2) Stateless(무상태)
    HTTP 프로토콜은 Stateless 프로토콜이므로 REST 역시 무상태성을 가짐.
    클라이언트의 context를 서버에 저장하지 않음. 
    즉, 세션과 쿠키와 같은 정보를 신경쓰지 않아도 되므로 구현이 단순
    서버는 각각의 요청을 완전히 별개의 것으로 인식하고 처리.
    각 API 서버는 클라이언트의 요청만을 단순 처리.
    즉, 이전 요청이 다음 요청 처리에 연관되어서는 안됨(단, DB에 의해 바뀌는 것은 허용)
    서버의 처리 방식에 일관성을 부여하기 때문에 서비스의 자유도가 높아짐.
 3) Cacheable(캐시 처리 기능)
    웹 표준 HTTP 프로토콜을 그대로 사용하므로 웹에서 사용하는 기존의 인프라를 그대로 활용할 수 있음.
    즉, HTTP가 가진 캐싱 기능을 적용할 수 있음.
    HTTP 프로토콜 표준에서 사용하는 Last-Modified Tag 또는 E-Tag를 이용해 캐싱을 구현.
    대량의 요청을 효율적으로 처리할 수 있음.
 4) Layered System(계층 구조)
    Client는 REST API 서버만 호출.
    REST 서버는 다중 계층으로 구성될 수 있음.
    보안, 로드 밸런싱, 암호화 등을 위한 계층을 추가하여 구조 변경 가능.
    Proxy, Gateway와 같은 네트워크 기반의 중간매체를 사용할 수 있음.
    하지만, 클라이언트는 서버와 직접 통신하는지, 중간 서버와 통신하는지는 알 수 없음.
 5) Uniform Interface (인터페이스 일관성)
    URI로 지정한 Resource에 대한 요청을 통일하고 한정적으로 수행하는 아키텍처 스타일.
    HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능. Loosely Coupling 형태를 가짐. (즉, 특정 언어나 기술에 한정되지 않음)
 6) Self-Descriptiveness (자체 표현)
    요청 메시지만 보고도 쉽게 이해할 수 있는 자체 표현구조로 되어있음.

REST API ? 
- REST API의 정의
  REST의 특징을 기반으로 서비스 API를 구현한 것.

- REST API의 특징
  각 요청이 어떤 동작이나 정보를 위한 것인지를 그 요청의 모습 자체로 추론이 가능.

- REST API 디자인
  URI는 정보의 자원을 표현해야 함.
  자원에 대한 행위는 HTTP Method로 표현.(행위는 URI에 포함하지 않음)

- REST API의 설계 규칙
  1) URI는 명사를 사용(동사가 아닌 명사를 사용)
    > /getUsers(get이라는 동사가 들어가서 사용X)
    > /updateUsers(update라는 동사가 들어가서 사용X)
  2) 슬래시( / )로 계층 관계를 표현.
  3) URI 마지막 문자로 슬래시( / )를 포함하지 않음.
  4) 밑줄( _ )을 사용하지 않고, 하이픈 ( - )을 사용.
  5) URI는 소문자로만 구성
  6) HTTP 응답 상태 코드 사용
    > 클라이언트는  해당 요청에 대한 실패, 처리완료 또는 잘못된 요청 등에 대한 피드백을 받아야 함.
    >상태 코드 : (1xx : 정보 응답 / 2xx : 성공 응답 / 3xx : 리다이렉트 / 4xx : 클라이언트 요청 오류 / 5xx : 서버 오류)
파일확장자는 URI에 포함하지 않음.
