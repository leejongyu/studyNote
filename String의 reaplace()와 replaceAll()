1. String.replace(String target, String change);
   > target이 되는 문자열을 change로 변경
   > 첫 번째로 발견한 문자열만 변경
   > 이 때 찾을 문자열은 정규표현식이 아닌 일반 문자열을 사용.
   
2. String.replaceAll(String target, String change);
   > target이 되는 문자열을 change로 변경.
   > 모든 발견된 문자열을 변경
   > 정규표현식 사용

3. String.replaceFirst(String target, String change);
   > target이 되는 문자열을 change로 변경
   > 발견된 문자열 중, 첫 번째 문자열만 변경
   > 정규표현식 사용
   
   
정규표현식: 정한 패턴을 가진 문자열을 표현하는 데 사용되는 문자열.

사용되는 정규표현식 :


[] : 대괄호 안에 있는 문자 중 일치하는 문자
[^] : 대괄호 안에 있는 문자들을 제외한 문자(=not)
() : 괄호 안의 문자열을 하나의 문자로 처리
| : OR
\\ : 정규표현식에서 사용되는 특수문자를 문자 그대로 사용하고 싶을 때 사용

. : 모든 문자
* : 0개 이상의 문자
+ : 1개 이상의 문자
? : 0개 또는 1개의 문자

^ : 시작
$ : 끝
^$ : 비어있는 문자열

\b : 단어의 경계
\B : 단어의 경계가 아닌 것

ex 1.) 
String.replaceAll("[^a-z0-9-_.]", "");
>> 대괄호[] 안에 있는 문자열들을 ""으로 바꾼다.
 > [^(not) a-z 까지, 0-9까지, -, _, .] 
 > 대괄호 안에 있는 것들은 띄어쓰기 없이 사용]
  > 즉, String에서 a-z사이에 없고, 0-9사이에 없으며, -, _, . 가 아닌 값들을 모두 ""로 바꾼다.

ex 2.)
String.replaceAll("\\.{2,}", ".");
>> \\. => 마침표를 모든문자가 아닌. 하나의 문자열로 인식하기 위해서 사용. [.]으로도 사용 가능.
>> A{int,} => A 문자열이 int번 이상 반복되는지 찾음.
 > 즉, String 안에서 "."가 2번 이상 반복되는 경우, "." 하나로 변경.
 
ex 3.)
String.replaceAll("^$", "a");
>> 정규표현식 "^$" = 비어있는 문자열
 > 즉, String이 비어있을 경우 a로 변경.

ex 4.)
String.replacerAll("^a.*t$" , "123");
>> a로 시작하고, t로 끝나는 문자열을 찾아서 123으로 변경.
>> "\b[a][a-z]*[t]\b"을 사용하여 같은 값을 찾을 수 있다.
