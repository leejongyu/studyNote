/*
Stream? : Java에서는 파일이나 콘솔의 입출력을 직접 다루지 않고, 운영체제에 의해 생성되는 가상의 연결고리 (중간 매개자 역할)
: Byte 형태로 데이터를 운반하는 단방향 연결 통로 
: 스트림은 한 방향으로만 흐름 (입력 or 출력. 입출력을 동시에 처리할 수 없음) 
: Java의 java.io 패키지의 InputStream과 OutputStream 클래스를 통해서 사용 가능

 (1) InputStream : read() 메서드를 통해서 입력 스트림으로부터 바이트를 읽음 
 (2) OutputStream : write() 메서드를 통해서 출력 스트림에 바이트를 저장
*/

// ex1) In/OutputStream = 1개의 입력값을 int형으로 입력
    
		InputStream in = System.in;
		// inputStream을 사용하는 경우, 여러개의 값을 입력해도 1개의 문자만 읽음. 기본형 = int
		OutputStream out = System.out;

		int input = in.read(); // inputStream의 기본형은 int
								// inputStream은 read() 메서드를 통해서 입력값을 읽어옴

		out.write(input); // outputStream은 write() 메서드를 통해서 값을 저장
		out.flush(); // flush() 메서드를 사용해서 저장된 값을 출력하면서 공간을 비워줌
		out.close(); // outputStream 을 끝내는 매서드

		// 문제점 : int를 기본형으로 1개의 문자밖에 가져오지 못함.

// ex2) InputStreamReader/OutputStreamWriter - 2개 이상의 입력값을 char의 배열 형태로 입력

		InputStreamReader reader = new InputStreamReader(in);
		// InputStreamReader는 InputStream의 객체를 매개변수로 전달받아서 사용

		OutputStreamWriter writer = new OutputStreamWriter(out);
		// OutputStreamWriter는 OutputStream의 객체를 매개변수로 전달받아서 사용

		char input2[] = new char[3];
		// 고정된 a개의 값을 배열을 통해 받아올수 있다.
		reader.read(input2);

		int a = Integer.parseInt(String.valueOf(input2));
		// char 배열로 입력 받은 값을 int로 변환

		writer.write(a); // 입력받은 값을 int로 변환한 값을 출력
		writer.flush(); // 출력 + 공간 비우기
		writer.close();
		/*
		 문제점 : 고정된 값의 char 배열을 읽음 
            > 입력된 값이 초과되거나 모자라는 등의 비효율적인 문제점 발생 
            > char의 배열로 값을 읽기 때문에 다른 타입으로 변환해서 사용해야함
		 */

/*
보조 스트림? : 실제로 데이터를 주고받을 수는 없지만, 다른 스트림의 기능을 향상시키거나 새로운 기능을 추가해줌 
  (1) Filter(Input/Output)Stream : 필터를 이용한 입출력 
  (2) Buffered(Input/Output)Stream : 버퍼를 이용한 입출력 (속도가 빠르다)
      > 기본형 = String 
      > 가변적인 값을 읽음. 
      > 입력받은 값을 Buffer에 저장하고 있다가 Buffer가 가득 차거나, 줄바꿈 문자가 나타나면 버퍼의 내용을 한번에 전송 
        >> 줄바꿈 문자 (스페이스, 엔터 등)
  (3) Data(Input/Output)Stream : 입출력 스트림으로부터 자바의 기본 타입으로 데이터를 읽음
*/
//	ex 3) BufferedReader/ BufferedWriter

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

		try {
			String s = br.readLine();
			// bufferedwriter 의 기본형인 String

			bw.write(s); // 출력
			bw.newLine(); // 줄 바꾸는 메소드

			bw.flush(); // 남은 값 출력 && 버퍼 초기화
		} catch (Exception e) {
		} finally {
			try {
				// 실행한 스트림 닫기
				br.close();
				bw.close();
			} catch (IOException e) {
			}
		}
    
    
	}
  
  /* ref
  https://terianp.tistory.com/19
  http://www.tcpschool.com/java/java_io_stream
 
  */
 
