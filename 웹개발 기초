1. 자료구조 방식 
1) Array(배열)
  같은 타입의 데이터들을 저장.
  고정된 크기를 가지고 있음
  indexing 되어 있어 index를 통해 데이터에 접근 가능

2) Linked List
  각 노드가 데이터와 포인터를 가진 한 줄로 연결되어 있는 자료구조.
  -> 첫번째 노드의 포인터를 통해 두번째 노드의 데이터를 찾을 수 있음.
  데이터의 숫자만큼 메모리를 사용 (크기가 고정되어 있지 않음)

3) stack(스택)
  원소의 입출력이 한 방향에서 이루어짐
  후입선출(Last In First Out) 방식. 마지막에 들어온 데이터가 가장 먼저 리턴
  구조 중간에 값을 추가할 수 없음.

4) Queue(큐)
  원소의 입력과 출력이 양방향에서 각각 진행됨.
  선입선출(First In First Out) 방식. 먼저 들어온 데이터가 가장 먼저 리턴

5) Tree(트리)
  최상위 노드에서 계속되는 하위 노드로 이어지는 형태. 
  컴퓨터 디렉터리/ 조직도의 구조로 되어있음

6) Heap(힙:더미)
  완전 이진 트리의 형태로 만들어진 자료구조.
  힙 특성은 트리의 루트 노드가 힙의 최대 or 최소 요소를 포함하도록 함
  최대힙 : 각 노드는 자식 노드보다 크거나 같다.
  최소힙 : 각 노드드는 자식 노드보다 작거나 같다.

7) Hash Table(해시 테이블)
  해시함수를 사용하여 변환한 값을 index로 삼아 Key와 Value로 저장
  데이터의 크기에 관계 없이 삽입 및 검색에 매우 효율적.

8) Graph(그래프)
  Vertex와 edge로 이루어진 자료구조. 정확히는 Vertex간의 관계를 표현하는 조직도.
  Vertex : node라고도 하며, 데이터가 저장됨
  edge : arcs라고도 하며, node간의 관계를 나타냄.
  Vertex마다 edge가 있을수도, 없을수도 있음
  루트 노드, 부모와 자식 개념이 없음


2. 추상클래스와 인터페이스의 차이는?
1) 추상클래스 : 
  메서드 구현 : 추상메서드(코드 구현이 되어있지 않음), 비추상메서드(코드 구현이 되어있음) 모두를 가질 수 있음.
  상속 : extends 키워드를 사용하여 하위 클래스에 상속. 단, 하나의 추상 클래스만 상속 가능
  필드 : 추상클래스는 필드를 가질 수 있음.
  접근제어자 : public, default, private, protected 접근제어자 사용 가능
  객체 생성 : 객체를 생성하기 위해 사용 가능.

2) 인터페이스 : 
  메서드 구현 : 추상메서드(코드 구현이 되어있지 않은 메서드)만 가질 수 있음.
  상속 : implements 키워드를 사용하여 여러개의 인터페이스를를 상속 가능.
  필드 : 인터페이스는 필드가 존재하지 않음.
  접근제어자 : public 접근제어자만 사용 가능.
  객체 생성 : 객체를 생성하기 위해 사용할 수 없음.

3. 파일과 스트림의 차이는?
1) 파일 : 입출력 작업 이외의 파일, 폴더에 관한 작업을 File 클래스를 통해서 처리.

2) 스트림 : 자바에서 파일이나 콘솔의 입출력을 다룰 때 운영체제에 의해서 생성되는 가상의 연결고리(중간 매개체 역할).
  단방향 연결(입력 or 출력). 한 방향으로만 흐름. 
  InputStream. OutputStream 클래스를 통해서 사용

4. 컬렉션 프레임워크? 
  Java의 컬렉션 프레임워크는 객체 컬렉션을 저장, 조작하는 방법을 제공하는 클래스 및 인터페이스 집합.
  가장 일반적으로 사용되는 컬렉션 클래스는 ArrayList, LinkedList, HashSet, TreeMap.
  전반적으로 컬렉션 프레임워크는 ‘객체’를 사용하는데 있어서 유용한 도구.

5. 멀티스레딩에서 교착상태란?
  두 개 이상의 스레드가 서로가 상대의 작업이 끝날 때 까지 대기하는 상황. (무한대기)

6. GET, POST 방식
1) GET 방식 : 일반적으로 웹페이지 요청, 이미지 검색 등과 같이 서버의 상태를 변경하지 않는 요청 방식으로 URL에 표시. 캐싱이 됨. 브라우저에 기록,
2) POST 방식 : 데이터를 서버에 제출할 때 사용. 제출된 데이터는 URL이 아닌 request body에 포함. 양식 제출이나 파일 업로드와 같이 서버에서 리소스를 생성/ 업데이트 하는데 사용. 캐싱이 되지 않고, 브라우저에 기록되지 않음.

7. URL. URI, URN
1) URI :
  인터넷에서 이름이나 리소스를 식별하는 문자열.
  인터넷에 있는 자원을 나타내는 유일한 주소
  구성요소 : :scheme: :hosts: :uri-pattern: :query:
  scheme : 통신방식(프로토콜)을 결정 (일반적인 웹페이지는 http(s) 사용)
  hosts: 웹서버의 이름, 도메인, IP를 사용. (주소를 나타냄)
  uri-pattern : 웹서버에서 지정한 루트 디렉토리부터 시작하여 웹페이지, 혹은 기타 파일 등이 위치한 경로와 파일 명을 나타냄
  웹서버에 보내는 추가적인 질문(GET 방식에서 주로 사용)

2) URL : 
  웹 상의 주소를 나타내는 문자열이기 때문에 더 효율적으로 리소스에 접근하기 위한 REST API 등이 사용됨.

3) URN :
  프로토콜을 제외하고, 리소스의 이름을 가리키는데 사용.
  리소스 접근방법과, 웹 상의 위치가 표기되지 않음.
  리소스 자체에 부여된 영구적이고 유일한 이름.
  실제 자원을 찾기 위해서는 URL로 변환하여 이용

8.  JAVA?
  OOP(객체지향 프로그래밍)언어.
  JVM을 통해 모든 플랫폼에서 실행할 수 있음.

9. OOP(object-oriented programming)? 
  상태(속성)와 동작(메서드)을 갖는 객체 개념을 사용하는 프로그래밍 방법,
  재사용 가능한 코드 생성을 허용하고 코드 유지보수를 더 쉽게 함.,

객체지향의 특징
1) 캡슐화(Encapsulation) : 변수와 메서드를 클래스라는 단일 단위로 묶는 것.
  -> 클래스 사용자로부터 구현 세부 정보를 숨기고 개체의 상태를 임의로 변경하지 않도록 함.

2) 상속 : 하나의 클래스(부모 / 상위 클래스)의 기능을 다른 클래스(자식/ 하위 클래스)에서 사용할 수 있도록 허용하는 메커니즘.
  -> 따로 상위클래스의 기능들을 정의하지 않아도 사용할 수 있음.
  -> 코드의 재사용성이 증가하고 코드 유지보수가 쉬워짐.
  Method Overriding : 상위 클래스에서 제공한 메서드를 자체적으로 구현하는 하위클래스의 기능. 메서드 오버라이딩을 통해 상위클래스의 기능을 수정하거나 확장시킬 수 있음. Overriding은 상속이 없는 경우 사용할 수 없음.
  Method Overloading :  이름은 같지만 매개변수가 다른(타입, 개수 등)이 달라서 중복 정의가 필요한 경우 다른 여러 메서드를 정의하는 기능. Overloading은 상속과 관련이 없음.

3) 다형성(Polymorphism) : 메서드 오버로딩, 오버라이딩으로 하나의 객체가 다양한 방식으로 동작할 수 있는 것.
  Parent 클래스의 인스턴스를 Child 유형의 변수에 할당할 수 없음.

10. 기본형 변수와 참조형 변수 
1) 기본형 변수 
  int, float, boolean 등의 타입.
  변수를 선언하면 stack 영역에 실제 값이 저장.

2) 참조형 변수
  기본타입 이외의 변수들.
  변수를 선언하면 stack 영역에는 참조주소를 저장, heap 영역에 실제 값을 저장.

11. 메모리 영역
1) 코드 영역 (code)
  실행할 프로그램의 코드가 저장되는 영역. (text 영역이라고도 부름)
  CPU는 코드 영역에 저장된 명령어를 하나씩 가져가서 처리함.

2) 데이터 영역 (data)
  프로그램의 전역변수와 정적(static)변수가 저장되는 영역.
  프로그램의 시작과 함께 할당되며, 프로그램이 종료되면 소멸,

3) 스택 영역 (stack)
  함수의 호출과 관계되는 지역변수와 매개변수가 저장되는 영역.
  함수의 호출과 함께 할당. 함수의 호출이 완료되면 소멸.
  push로 데이터를 저장. pop으로 데이터를 인출.
  후입선출 방식에 따라 동작. 가장 늦게 저장된 데이터가 먼저 인출.
 특징:
    매우 빠른 액세스
    변수를 명시적으로 할당, 해제 할 필요가 없음
    공간은 CPU에 의해 효율적으로 관리되고 메모리는 단편화되지 않음.
    지역변수만 해당
    스택 크기 제한
    변수의 크기를 조정할 수 없음

4) 힙 영역 (heap)
  사용자가 직접 관리하는 영역.
  사용자에 의해 메모리 공간이 동적으로 할당되고 해제.
  낮은 주소에서 높은 주소의 방향으로 할당.   
 특징 : 
    상대적으로 느린 액세스.
    전역적으로 액세스 할 수 있음
    메모리 크기 제한 없음.
    메모리를 관리해야함.(변수를 할당, 해제 해야 함)
    효율적으로 사용하지 않으면 메모리 블록이 할당된 후 시간이 지남에 따라 해제될 수 있음.

12. Garbage collector : heap 영역에 필요 없어진 변수들을 자동으로 삭제 해주는 기능.
 -> 메모리 누수를 방지하고, 프로그램의 메모리 사용을 최적화.

13. 익명클래스 :
인터페이스를 일회성으로 사용하거나 메서드를 상속 받을 때 일회성으로 변경이 필요한 경우 사용

14. Thread : 
프로세스 내의 작업 실행 단위. runnable 인터페이스나 thread 클래스를 상속받아서 사용

1) runnable 인터페이스 : 
  구현해야하는 run() 메서드를 제공

2) Thread 클래스 :
  thread 우선순위 및 이름 설정하는 기능 등 제공
  멀티스레드를 통해서 둘 이상의 작업을 동시에 수행 가능
  멀티스레딩은 사용가능한 CPU 리소스를 효율적으로 활용하여 프로그램의 성능을 향상시키는 데 사용할 수 있음.
 
15. 자바 웹개발에 사용되는 기술
Spring Framework
엔터프라이즈급 Java 애플리케이션을 구축하기 위한 오픈소스 프레임워크
엔터프라이즈급 Java 애플리케이션 : 대규모의 복잡한 SW 시스템.
Java EE(Enterprise Edition), Spring Framework, JPA, Servlet 등등..
다른 시스템과 통합, 다양한 배포 모델을 지원
JSP (Java Server Pages)
Java 코드를 HTML에 삽입하여 동적 웹페이지를 만드는 데 사용하는 기술
개발자는 서버 측에서 동적 콘텐츠를 생성하고 이를 클라이언트 측 웹브라우저로 보내는 Java 코드를 작성할 수 있음
JSP는 servlet으로 컴파일되어 서버측에서 실행
Servlet
서버 측에서 실행되고 클라이언트 요청 및 서버 응답을 처리하는 Java 클래스
동적 웹 애플리케이션을 생성하고 서버의 코드가 클라이언트의 웹브라우저와 상호작용하는 방법을 제공하는데 사용
HTTP 요청을 처리하고 HTML 응답을 생성하는데 사용

