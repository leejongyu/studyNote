1. 최대공약수( GCD )

public static int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

2. 최소공배수( LCM ) 
public static int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

3. 소인수분해 (factorization)
public static void factorization(int n) {
    for (int i = 2; i <= n; i++) {
        while (n % i == 0) {
            (Collections).add(or put, append....)(i);
            n /= i;
        }
    }
}

4. a / b가 유한소수인지 구하기 (최대공약수 응용)
class Solution {
    public int solution(int a, int b) {
        int gcd = getGcd(a, b); // 최대공약수 구하기

        while (gcd > 1) { // 기약분수로 만들기
            a /= gcd; // 분자
            b /= gcd; // 분모 
            gcd = getGcd(a, b);
        }

        if (b % 2 == 0 || b % 5 == 0) { // 분모가 2와 5의 곱으로 이루어져 있는지 판별
            return 1; // 유한소수
        } else {
            return 2; // 무한소수
        }
    }

    private int getGcd(int a, int b) { // 최대공약수 구하기
        if (b == 0) {
            return a;
        } else {
            return getGcd(b, a % b);
        }
    }
}
