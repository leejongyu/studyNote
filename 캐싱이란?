캐싱.(caching)
cache : 데이터나 값을 미리 복사해 놓는 임시 장소.

1. 캐싱이란 ? 자주 액세스하는 데이터를 메모리나 디스크와 같은 임시 저장 위치에 저장하여 시스템 성능을 개선하는데 사용되는 기술.

2. 캐싱의 작동 : 캐시 데이터는 일반적으로 RAM과 같이 빠르게 액세스 할 수 있는 하드웨어에 저장. 소프트웨어 구성 요소와 함께 사용될 수 있음.

3. 캐싱의 목적 :
- 더 느린 스토리지 계층에 접근해야 하는 필요를 줄임으로 데이터 검색 성능을 높이는 것. 
- 속도를 위해 용량을 절충하는 캐시는 일반적으로 데이터의 하위 집합을 일시적으로 저장,


4. 캐싱을 구현하는 기술 
 1) 페이지 캐싱 : 웹페이지의 HTML 출력을 캐싱.
                 캐싱 프록시 서버 또는 역방향 프록시 캐시를 사용하여 수행.
                 사용자가 페이지를 요청하면 가능한 경우 캐시된 버전이 반환되어 백엔드 서버의 부하가 감소,

 2) 객체 캐싱 : 사용자 프로필이나 제품 정보 등 자주 액세스하는 데이터 객체를 캐싱.
               인메모리 캐시 또는 Redis 또는 Memcached와 같은 분산 캐시를 사용하여 수행.
               사용자가 객체를 요청할 때 사용 가능한 경우 캐시된 버전이 반환되어 데이터의 부하가 감소.
               
 3) 쿼리 캐싱 : 자주 실행되는 데이터베이스 쿼리 결과를 캐싱.
               MySQL쿼리 캐시와 같은 데이터베이스 수준의 캐시를 사용하거나, Redis 또는 Memcached와 같은 분산 캐시를 사용하여 수행.
               쿼리가 실행 될 때, 가능한 경우 캐시된 결과가 반환되므로 DB의 부하가 감소.

 4) CDN 캐싱 : 이미지, 동영상, 정적 파일 등 자주 액세스하는 콘텐츠를 분산된 서버 네트워크에 캐싱.
              백엔드 서버의 부하가 감소. 웹사이트의 성능이 향상.

5. 캐싱을 구현할 때 고려해야하는 것
 1) 캐시 만료 : 캐시된 데이터에는 만료 시간을 설정하여 오래된 데이터가 사용자에게 제공되지 않도록 해야 함.
 2) 캐시 무효화 : 캐시된 데이터는 기초 데이터가 변경되면 무효화하여 사용자가 최신 정보를 볼 수 있도록 해야함.
 3) 캐시 일관성 : 캐시된 데이터는 여러 서버에서 일관성을 유지해야 하며, 시스템에서 불일치를 일으키지 않아야 함.
 4) 캐시 퇴출 : 캐시가 너무 커져서 메모리를 너무 많이 사용하지 않도록 캐시 퇴출 방법을 구현해야 함.
