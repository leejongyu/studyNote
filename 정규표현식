1) 정규표현식: 정한 패턴을 가진 문자열을 표현하는 데 사용되는 문자열.

2) 정규표현식이 사용되는 경우 :

  1 .문자열 검색과 대체: 문자열에서 특정 패턴을 검색하거나 해당 패턴을 다른 문자열로 대체하는 경우
  
  2.유효성 검사: 입력된 데이터가 올바른 형식인지 확인하기 위해 정규표현식을 사용. 
                예를 들어, 이메일 주소, 전화번호, 주민등록번호 등의 형식을 검사하는 경우 사용.

  3.텍스트 분석: 텍스트 데이터를 분석하거나 가공하는 경우에도 정규표현식이 유용. 
                예를 들어, 문서 내에서 특정 단어나 구를 검색하거나, 문자열을 분리하거나, 특정 문자열 패턴을 분석하는 경우에 사용.

  4.데이터 추출: 웹페이지에서 데이터를 추출하거나 파일에서 원하는 정보를 추출하는 경우.

  5.문자열 처리: 다양한 문자열 처리 작업에 사용. 

 단, 정규표현식은 항상 최적의 해결책이 아니며, 경우에 따라 다른 방법으로 처리하는 것이 더 나은 경우도 있음. 
 > 따라서, 적절한 상황에서 정규표현식을 적용하는 것이 중요합니다.

3) 정규표현식의 종류 :
  [] : 대괄호 안에 있는 문자 중 일치하는 문자
  [^] : 대괄호 안에 있는 문자들을 제외한 문자(=not)
  () : 괄호 안의 문자열을 하나의 문자로 처리
  | : OR
  \\ : 정규표현식에서 사용되는 특수문자를 문자 그대로 사용하고 싶을 때 사용

  . : 모든 문자
  * : 0개 이상의 문자
  + : 1개 이상의 문자
  ? : 0개 또는 1개의 문자

  ^ : 시작
  $ : 끝
  ^$ : 비어있는 문자열

  \b : 단어의 경계
  \B : 단어의 경계가 아닌 것

  ex 1.) 
  String.replaceAll("[^a-z0-9-_.]", "");
  >> 대괄호[] 안에 있는 문자열들을 ""으로 바꾼다.
   > [^(not) a-z 까지, 0-9까지, -, _, .] 
   > 대괄호 안에 있는 것들은 띄어쓰기 없이 사용]
    > 즉, String에서 a-z사이에 없고, 0-9사이에 없으며, -, _, . 가 아닌 값들을 모두 ""로 바꾼다.

  ex 2.)
  String.replaceAll("\\.{2,}", ".");
  >> \\. => 마침표를 모든문자가 아닌. 하나의 문자열로 인식하기 위해서 사용. [.]으로도 사용 가능.
  >> A{int,} => A 문자열이 int번 이상 반복되는지 찾음.
   > 즉, String 안에서 "."가 2번 이상 반복되는 경우, "." 하나로 변경.

  ex 3.)
  String.replaceAll("^$", "a");
  >> 정규표현식 "^$" = 비어있는 문자열
   > 즉, String이 비어있을 경우 a로 변경.

  ex 4.)
  String.replacerAll("^a.*t$" , "123");
  >> a로 시작하고, t로 끝나는 문자열을 찾아서 123으로 변경.
  >> "\b[a][a-z]*[t]\b"을 사용하여 같은 값을 찾을 수 있다.

  ex 5.)
  String.replaceAll(".(?=.{4})", "*");
  >> . => 문자를 선택할건데,
    >(?=.{int}) => 뒤쪽에 int 만큼의 자릿수 이외의 문자를 제외하고 선택.
     > 즉, 뒤에 4개의 문자열을 제외한 나머지를 선택하고 '*'로  
