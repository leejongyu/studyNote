Stream :  array 또는 collection 객체에 저장된 원소들을 처리하는 코드패턴.
         > 람다표현식을 사용하여 객체의 원소에 대한 처리할 수 있음
          
1. Stream 정의 : 데이터 처리연산을 지원하도록 소스에서 추출된 연속된 요소
  ? 데이터 처리 연산: 스트림은 함수형 프로그래밍에서 지원하는 연산과 데이터베이스의 SQL 질의형과 비슷한 연산을 처리할 수 있다.
  ? 소스 : 스트림은 컬렉션, 배열, I/O 자원등의 소스로부터 데이터를 소비하고 정렬된 컬렉션으로 스트림을 생성하면 정렬이 그대로 유지된다. 
          즉 리스트로 스트림을 만들면 스트림의 요소는 리스트의 요소와 같은 순서를 유지한다.
  ? 연속된 요소 : 컬렉션 자료구조와 마찬가지로 스트림은 특정 요소 형식으로 이루어진 연속된 값 집합의 인터페이스를 제공한다.
                 컬렉션에서는 시간, 공간의 복잡성과 관련된 요소의 저장 및 연산이 이루어진다면 스트림에서는 filter, sorted, map 처럼 표현 계산식으로 이루어져 있다.
                 즉 컬렉션의 주제는 데이터, 스트림의 주제는 계산입니다.

2. Stream 특징
 1) Pipelining : 스트림 연산들은 서로 연결하여 큰 파이프 라인을 구성할수 있도록 스트림 자신을 반환한다. SQL 등 데이터베이스의 질의문과 비슷함 
 2) 내부 반복 : 반복자를 이용하여 명시적으로 반복하는 컬렉션과 다르게 스트림은 내부 반복 기능을 제공
 3) 반복의 일회성 : Stream에서는 소비의 개념을 사용하기 때문에, 한 번 처리한 반복문을 다시 실행하면 에러가 발생.

3. Stream 연산
 1) 중간연산 : 파이프라인으로 연결할 수 있는 연산들
               중간연산은 다른 스트림을 반환하기 때문에 여러개의 중간연산을 연결하여 query를 만들 수 있다. 최종연산을 실행하기 전까지는 아무런 연산을 수행하지 않는다.
              > filter(), map(), limit() 등
 2) 최종연산 : 파이프라인을 실행한 다음 닫는 연산
               파이프라인 연산의 결과를 출력.
              > collect()
 
4. Stream 생성  
  1) Collection.stream()
   > 컬렉션 객체들이 갖고 있는 .stream() 메서드를 호출하여 객체를 생성
    > Stream<Collection 객체에 저장된 원소의 데이터 타입> stream이름 = collection객체이름.stream();
    > List<Integer> list = new ArrayList<>():
      Stream<Integer> collectionStream = list.stream();
  
  2) Array.stream()
   > Arrays가 가진 .stream() 메서드를 호출하여 객체를 생성
    > Stram<array 객체에 저장된 원소의 데이터 타입> stream이름 = Arrays.stream(array이름);
    > Integer[] array = new Integer[int i];
      Stream<Integer> arrayStream = Arrays.stream(array);
  
  3) Empty Stream
   > Stream 객체를 참조하는 변수가 null일 경우, NullPointException이 발생할 수 있는데, 이 경우에 사용
    > Stream<데이터타입> stream이름 = Stream.empty();
    > Stream<Integer> emptyStream = Stream.empty();
    
  4) Stream.builder()
   > 배열, 컬렉션 등을 통해서 생성하는것이 아니라 직접 값을 입력해서 객체를 생성
    > Stream<입력할 값들의 데이터타입> stream이름 = Stream<데이터타입>builder().add(데이터).add(데이터)......build();
    > Stream<Integer> streamBuilder = Stream.<Integer>builder().add(1).add(2).add(3).build();
    
  5) Stream.generate()
   > 데이터를 생성하는 람다식을 이용하여 스트림을 생성할 수 있다.
   > 이 과정에서는 Supplier에 해당하는 람다로 값을 넣을 수 있다.
    >> Sulpplier ? 매개변수는 없고, 리턴 값만 있는 인터페이스. 
    >>            Generic typr = String
    >>> Supplier<String> abcSupplier = () -> "abc" ;
        sysout(abcSupplier.get()); = > "abc"를 출력
   > limit() 메서드를 사용하지 않으면 데이터를 무한대로 생성하기 때문에 limit을 주어야 함
   > Stream<데이터타입> stream이름 = Stream.generate( () -> "데이터".limit(0 이상의 정수);
   > Stream<String> streamGenerate = Stream.generate( () -> "123".limit(3); => '123"이 3번 저장된 stream 생성

  5-1) 함수형 인터페이스
   > Supplier<T> / T get();   // T를 return.
     >> Supplier<T>의 Lazy Evaluation : 게으른 연산 / 불필요한 연산을 피하기 위해 연산을 지연시킴
     >> Supplier<String> abcSupplier = () -> "abc" ;
        System.out.println(abcSupplier.get());
   > Function<T, R> / R apply(T t); // T를 매개변수로 받고 R을 return;
     >> Function<Integer, String> func = (a) -> a+" 를 리턴" ;
        System.out.println(func.apply(2));
        result = "2 를 리턴";
   > Consumer<T> / void accept(T t); // T를 매개변수로 받고 T를 소모
     >> Consumer<Integer> consumer =
          (int a) -> System.out.println((a * 10));
          consumer.accept(100);
          result = 1000;
   > Predicate<T> /boolean test(T t); // T를 매개변수로 받고, Boolean을 return;
     >> Predicate<Integer> pred = (a) -> a < 0;
        System.out.println(pred.test(-5));
        result = true;
    
  6) Stream.iterate()
   > 수열 형태의 데이터를 생성
    > Stream<입력할 값들의 데이터타입> stream이름 = Stream.iterate(초기값, 수열 식).limit(0 이상의 정수);
    > limit() 메서드를 사용하지 않으면 데이터를 무한대로 생성하기 때문에 limit을 주어야 함
    > Stream<Integer> streamIterte = Stream.iterate(n, n-> n*2).limit(5);
      System.out.println(iteratedStream.toList());
      result = > n 값이 2라면 2, 4, 8, 16, 32를 return;
      
  7-1) Stream(generic)
   > 기본 타입의 스트림을 생성
    > IntStream intStream = Intstream.range(1,5); // [1,2,3,4]를 원소로 갖는 int stream
    > LongStream LongStream = Longstream.rangeClosed(1,5); // [1,2,3,4,5]를 원소로 갖는 long stream
    > Stream<Integer> boxStream = IntStream.range(1,5).boxed(); // boxing을 하려면 제네릭을 이용해야함.
    > DoubleStream DoubleStream = new Random().doubles(7, 1, 10); // 1~10 범위의 double형 난수 7개 생

  7-2) Stream(String)
   > 문자열 타입의 스트림을 생성
    > Stream<String> stringStream = Stream.<String>builder().add().build();
    > Stream<String> stringStream = Pattern.compile(",").splitAsStream("A,B,C"); // [A,B,C]
    > IntStream stream = "String".chars(); // [83,116,114,105,110,103] / 해당 문자열을 이루고 있는 문자들의 아스키코드 값을 저장
    
  8) File Stream
   > 텍스트 파일을 라인 단위로 처리하는 코드
    > Stream<String> textStream = Files.lines(Paths.get("test.txt"), Charset.forName("UTF-8"));
  
  9) Parallel Stream
   > 스트림 생성 시 Stream 대신 parrallelStream 메서드를 생성하여 생성
    >> 단, parallel stream 의 오버헤드가 stream 보다 훨씬 크다.
     따라서, 이를 뛰어 넘을 정도로 병렬 처리가 효율적인 작업인 경우에만 써야한다.
     (ex. 처리할 list 사이즈가 굉장히 커서 직렬 처리보다 병렬 처리가 훨씬 유리한 경우 등)

5. Stream 데이터 가공
  1) filter : Stream<T> filter(Predicate<? super T> predicate);
   >  Filtering은 스트림 내의 원소들에 대하여 평가식에 boolean을 return하는 Predicate 인터페이스에 만족하는 원소들만 return하게 됨.
    >> IntStream<Integer> streamFilter = new Random().ints(10, 1, 100).filter(i -> (i%2==0));
       1 ~ 100 범위에서 무작위로 10개를 골라서 -> 짝수인 애들만 필터링 한다.
  
  2) map : <R> Stream<R> map(Function<? super T, ? extends R> mapper);
   > Mapping은 스트림 내의 원소들에 대하여 평가식에 T값을 매개변수로 입력받아서 R을 return하는 Function 인터페이스를 실행하여 return
   > 입력하는 람다식은 
    >> Stream<String> stream = Stream.<String>builder().add("Lee").add("Kim").add("choi").add("park").build()
      .map(String::toUpperCase);
       stream.forEach(System.out::print); => "LEE","KIM","CHOI","PARK" 이 출력
   
  3) flatMap : <R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper);
   > flatMap() 메서드의 매개변수로 받는 람다는 리턴 타입이 Stream.
   > 즉, 새로운 스트림을 생성해서 리턴하는 람다를 매개변수로 받는다.
   > Flattening 중첩된 스트림 구조를 한단계 적은 단일 컬렉션에 대한 스트림으로 만들어주는 역할.
    

   
  
  
  

ref
 > https://ksr930.tistory.com/237/
 > https://hbase.tistory.com/171/
 > https://futurecreator.github.io/2018/08/26/java-8-streams/
 > blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=woong17&logNo=221268337085
