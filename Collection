1. Collecion : 데이터의 집합, 그룹 등을 의미
              > List, Set, Map 등이 있음
              > import java.util.* 로 import 가능


>> 1) List : 순서가 있는 데이터의 집합. 데이터 중복 가능 
            
    (1) List의 특징
     1: 값을 저장하는 순서가 중요. - index를 가지고 있음.
     2: 값들을 저장 할 때마다 index는 자동으로 증가. - 저장 용량이 자동으로 증가 (배열과 다른점)
     3: 리스트 중간에 있는 값을 삭제하면 인덱스는 자동으로 재배열.
     4: 같은 값을 여러번 저장할 수 있음. (Set<E>는 같은 값을 여러번 저장할 수 없음.
     5: List<E>에서 <E>는 리스트가 저장하는 원소(elemant)의 데이터 타입 (반드시 클래스 이름만 가능.)

    (2) List의 종류
     1: LinkedList : Linked list 알고리즘을 사용하는 리스트.
                   : 데이터의 저장/ 삭제 속도가 빠르지만 데이터 검색이 느리다.
     2: ArrayList : 배열(Array)를 사용하는 리스트.
                  : 데이터의 저장/ 삭제 속도가 느리지만 검색 속도가 빠르다.
    
    (3) List의 생성
     1: List<변수의 타입> 변수 이름 = new Array(|| Linked)List<>();
     2: List<변수의 타입> 변수 이름 = Arrays.asList(값 직접 입력);
     
    (4) List의 메서드 : 
     1: 변수이름.size() : List의 크기(원소의 개수)  
     2: 변수이름.add(E element) : 리스트에 새로운 원소를 추가
     3: 변수이름.get(int index) : 리스트에서 인덱스 위치의 원소를 리턴.
     4: 변수이름.remove(E element) : 리스트에서 처음 등장하는 element 1개를 삭제
     5: 변수이름.set(int index, E Element) : index의 내용을 element로 변경.
    

>> 2) Set : 순서가 없는 데이터의 집합. 데이터가 중복될 수 없음.

    (1) Set의 특징
     1. 중복된 값을 저장하지 않음. (예) = {1,2} = {1,2,1,2}
     2. 저장하는 순서가 중요하지 않음 index가 없음 (for문을 사용할 수 없음) (예) {1,2,3} = {3,1,2}
				> 집합에 포함된 원소들을 찾는 for-each문이나 Iterator는 사용 가능
     3. Set은 index를 이용하지 않기 때문에 인덱스를 이용한 검색/ 추가/ 삭제 메서드는 제공하지 않음.
        > index를 이용하는 set, get 등의 메서드는 존재하지 않음.
    
    (2) Set의 종류
     1: HashSet : Hash 알고리즘(검색을 빠르게 하는 알고리즘)을 사용하는 Set.
        > HashSet<파라미터> 변수이름 = new HashSet<파라미터-생략가능->();
        > 주어진 값을 정해진 기준으로 그룹으로 묶어서 정리
        > 갖고 있는 값들이 같은 HashSet을 비교하기 위해서는 Equals, hashCode를 overide 해서 묶어야함
      
     2: TreeSet : Tree 알고리즘(정렬을 빠르게 하는 알고리즘)을 사용하는 Set.
        > TreeSet<파라미터> 변수이름 = new TreeSet<파라미터-생략가능->();
        > node - leap 로 기준에 맞게 정렬하여 정리 
          // treeSet.iterator() = 오름차순
          
          
>> 3) Map : Key와 Value의 쌍으로 구성된 데이터를 저장하는 자료구조.
    (1) Key와 Value
     1. Key : 중복된 값을 가질수 없는, List의 index와 비슷한 역할을 수행
       > 데이터의 저장/ 검색/ 수정/ 삭제 시 값을 찾기 위한 용도.
     2. Value : Key가 갖고 있는 값. 중복된 값을 가질 수 있음.
     
    (2) Map의 종류
     1: HashMap : 검색을 빠르게 하는 Map.
        > HashMap<K 파라미터, V 파라미터> 변수이름 = new HashMap<파라미터-생략가능->();
     2: TreeMap : 정렬을 빠르게 하는 Map.
        > TreeMap<K 파라미터, V 파라미터> 변수이름 = new TreeMap<파라미터-생략가능->();
        
    (3) Map의 메서드
     1. 변수이름.put(K,V) : Map<K,V>에 key - value 쌍의 데이터를 저장. 만약 Key가 이미 존재한다면 Value값을 덮어씀
     2. 변수이름.get(K) : key를 입력하면 Value를 리턴. 만약 해당 Key가 존재하지 않으면 null을 리턴.
     3. 변수이름.getOrDefault(K,V) : 검색할 key(K)와 key가 존재하지 않을 때 리턴할 기본 값(V)을 argument로 전달.
     4. 변수이름.remove(K) : key를 입력하면 해당 key에 mapping된 Key - Value 원소를 삭제 후 삭제한 value를 리턴. 만약 해당 key가 존재하지 않으면 null을 리턴. (에러가 발생하지 않음)
     
     (4) Map의 반복문 사용방법
      1. Key로 이루어진 Set 집합을 생성하여 반복문을 시행
      Set<Key의 파라미터> 'set 변수이름 =s' = 'Map 변수이름 m'.keySet();
       
      2. for - each를 통한 반복문
      for (key값의 데이터 타입) '변수이름 x' : Map변수.keySet()){
       Map변수.get(x);
      }
      
